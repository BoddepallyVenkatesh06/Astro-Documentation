---
import { useTranslations } from '../../../node_modules/@astrojs/starlight/utils/translations';
import { Icon } from '@astrojs/starlight/components';
import type { Props } from '@astrojs/starlight/props';
import { tutorialPages as pages } from '~/content';
import { getTutorialPages } from '../../util/getTutorialPages';
import { getLangFromSlug, stripLangFromSlug } from '~/util';

const { dir, locale, pagination, entry, slug } = Astro.props;

// @ts-expect-error type isn't specific enough, but we know it's correct
const lang = getLangFromSlug(slug);
let { prev, next } = pagination;

const tutorialPages = getTutorialPages(pages, lang.toLowerCase());

if (Astro.props.entry.slug.split('/')[1] === 'tutorial') {
	const i = tutorialPages.findIndex((p) => p.slug === entry.slug);
	if (tutorialPages[i - 1]) {
		const prevPage = tutorialPages[i - 1];

		// @ts-expect-error type is incorrect?
		prev = {
			href: `/${lang}/${stripLangFromSlug(prevPage.slug)}/`,
			isCurrent: false,
			label: prevPage.data.title,
			type: 'link',
		};
	}
	if (tutorialPages[i + 1]) {
		const nextPage = tutorialPages[i + 1];

		// @ts-expect-error type is incorrect?
		next = {
			href: `/${lang}/${stripLangFromSlug(nextPage.slug)}/`,
			isCurrent: false,
			label: nextPage.data.title,
			type: 'link',
		};
	}
}

const isRtl = dir === 'rtl';
const t = useTranslations(locale);
---

<div class="pagination-links" dir={dir}>
	{
		prev && (
			<a href={prev.href} rel="prev">
				<Icon name={isRtl ? 'right-arrow' : 'left-arrow'} size="1.5rem" />
				<span>
					{t('page.previousLink')}
					<br />
					<span class="link-title">{prev.label}</span>
				</span>
			</a>
		)
	}
	{
		next && (
			<a href={next.href} rel="next">
				<Icon name={isRtl ? 'left-arrow' : 'right-arrow'} size="1.5rem" />
				<span>
					{t('page.nextLink')}
					<br />
					<span class="link-title">{next.label}</span>
				</span>
			</a>
		)
	}
</div>

<style>
	.pagination-links {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(min(18rem, 100%), 1fr));
		gap: 1rem;
	}

	a {
		display: flex;
		align-items: center;
		justify-content: flex-start;
		gap: 0.5rem;
		width: 100%;
		flex-basis: calc(50% - 0.5rem);
		flex-grow: 1;
		border: 1px solid var(--sl-color-gray-5);
		border-radius: 0.5rem;
		padding: 1rem;
		text-decoration: none;
		color: var(--sl-color-gray-2);
		box-shadow: var(--sl-shadow-md);
		overflow-wrap: anywhere;
	}
	[rel='next'] {
		justify-content: end;
		text-align: end;
		flex-direction: row-reverse;
	}
	a:hover {
		border-color: var(--sl-color-gray-2);
	}

	.link-title {
		color: var(--sl-color-white);
		font-size: var(--sl-text-2xl);
		line-height: var(--sl-line-height-headings);
	}

	svg {
		flex-shrink: 0;
	}
</style>
